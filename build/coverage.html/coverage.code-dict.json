{"/home/travis/build/npmtest/node-npmtest-angular2-cli/test.js":"/* istanbul instrument in package npmtest_angular2_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/lib.npmtest_angular2_cli.js":"/* istanbul instrument in package npmtest_angular2_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular2_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular2_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular2-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular2_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular2_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular2_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_angular2_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular2_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_angular2_cli.__dirname + '/lib.npmtest_angular2_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/cli/index.js":"/* eslint-disable no-console */\n\nconst cli     = require('commander');\nconst pkg     = require('../../package.json');\nconst ng2     = require('export-files')(`${__dirname}/commands`);\nconst colors  = require('colors');\n\ncli.name = 'ng2';\ncli.version(pkg.version)\n  .usage('<command> [options]');\n\ncli.command('create <app-name>')\n  .description('Create angular app')\n  .option('-c, --css-processor    <sass/less>', 'CSS pre-processor [default: sass]', 'sass')\n  .option('    --surge', 'Create surge.sh deployable app')\n  .action((appName, options) => {\n    ng2.create(appName, {\n      cssProcessor : options.cssProcessor,\n      surge        : options.surge,\n    });\n  });\n\ncli.command('init')\n  .description('Initialize and install dependancies')\n  .action(() => {\n    ng2.init();\n  });\n\ncli.command('build')\n  .description('Build the app')\n  .option('    --dev', 'Development mode [default]')\n  .option('    --prod', 'Production mode')\n  .action((options) => {\n    ng2.build(options);\n  });\n\ncli.command('serve')\n  .description('Build and run the app')\n  .option('    --dev', 'Development mode [default]', 'true')\n  .option('    --prod', 'Production mode', 'true')\n  .action((options) => {\n    ng2.serve(options);\n  });\n\ncli.command('test')\n  .description('Run unit tests')\n  .action(() => {\n    ng2.test();\n  });\n\ncli.command('make <scaffold> <scaffold-name>')\n  .description('Generate scaffolds')\n  .on('--help', () => {\n    console.log('  Scaffolds:\\n');\n    console.log('    component <path/component-name>');\n    console.log('    directive <path/directive-name>');\n    console.log('    pipe      <path/pipe-name>');\n    console.log('    service   <path/service-name>');\n    console.log('    route     <route-name>\\n');\n  })\n  .action((scaffold, scaffoldName) => {\n    ng2.make(scaffold, scaffoldName);\n  });\n\ncli.arguments('<cmd>')\n  .action((cmd) => {\n    console.log(\n        `\\n ${colors.red(`[ERROR] - Invalid command: ${cmd}`)}\n        \\n Run \"ng2 --help\" for a list of available commands.\\n`\n      );\n    process.exit(0);\n  });\n\ncli.parse(process.argv);\nError.stackTraceLimit = Infinity;\n\nif (!cli.args.length) {\n  cli.parse([process.argv[0], process.argv[1], '-h']);\n  process.exit(0);\n}\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/cli/commands/build.js":"'use strict';\n\nconst Command = require('./command');\nconst ui      = require('../../ui/progress-dots');\nconst Build   = require('../../tasks/build');\n\nclass BuildCmd extends Command {\n  run(options) {\n    this.validate().\n      then(() => {\n        Build.new({ ui, env: options.env }).run();\n      });\n  }\n}\n\nmodule.exports = (options) => {\n  const env = options.prod ? 'prod' : 'dev';\n  const cmd = new BuildCmd();\n  cmd.run({ env });\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/cli/commands/command.js":"'use strict';\n\nconst path = require('path');\nconst pkg  = require('../../util/pkg');\nconst ui   = require('../../ui/progress-dots');\n\nclass Command {\n  constructor(args) {\n    Object.assign(this, args);\n  }\n\n  run() {\n    throw new Error('Cmd needs to have run() defined.');\n  }\n\n  validate() {\n    this.appDir = path.resolve('./');\n    return pkg.read(this.appDir).\n    then((data) => {\n      if (!data['angular2-cli']) {\n        // || !data.devDependencies['angular2-cli']\n        return Promise.reject();\n      }\n      return Promise.resolve(data);\n    }).\n    catch(() => {\n      ui.writeError('\\nYou have to be inside an angular2-cli project to run this command.\\n');\n      return Promise.reject();\n    });\n  }\n}\n\nmodule.exports = Command;\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/util/pkg.js":"'use strict';\n\nconst fs      = require('fs-extra');\nconst Promise = require('bluebird');\n\nmodule.exports = {\n  read : (path) => {\n    const pkg = `${path}/package.json`;\n    const read = Promise.promisify(fs.readJson);\n\n    return read(pkg);\n  },\n  write : (path, data) => {\n    const pkg = `${path}/package.json`;\n    const write = Promise.promisify(fs.writeJson);\n\n    return write(pkg, data, { spaces: 2 });\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/ui/progress-dots.js":"'use strict';\n\nconst Ui = require('./base-ui');\n\nclass ProgressDots extends Ui {\n  startProgress(message) {\n    super.startProgress({\n      message,\n      spinner : 'simpleDots',\n    });\n  }\n}\n\nmodule.exports = new ProgressDots();\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/ui/base-ui.js":"/* eslint-disable no-console */\n\n'use strict';\n\nconst cliSpinners = require('cli-spinners');\nconst logUpdate   = require('log-update');\nconst colors      = require('colors');\n\nclass BaseClass {\n  constructor(args) {\n    Object.assign(this, {\n      spinner      : cliSpinners.dots,\n      spinnerColor : 'black',\n      frameIndex   : 0,\n      intervalId   : undefined,\n      colors,\n    }, args);\n  }\n\n  writeInfo(message) {\n    console.log(message);\n  }\n\n  writeSuccess(message) {\n    console.log(colors.green(message));\n  }\n\n  writeWarning(message) {\n    console.log(colors.red(message));\n  }\n\n  writeError(message) {\n    console.log(colors.red(message));\n  }\n\n  startProgress(options) {\n    const _this = this;\n    _this.spinnerColor = options.sprinnerColor || _this.spinnerColor;\n    _this.spinner = cliSpinners[options.spinner] || _this.spinner;\n\n    _this.intervalId = setInterval(() => {\n      logUpdate(colors.blue(options.message + _this.getSpinnerFrame()));\n    }, _this.spinner.interval);\n  }\n\n  stopProgress() {\n    clearInterval(this.intervalId);\n    this.intervalId = null;\n    this.clear();\n  }\n\n  clear() {\n    logUpdate.clear();\n  }\n\n  getSpinnerFrame() {\n    this.frameIndex = ++this.frameIndex % this.spinner.frames.length;\n    return this.spinner.frames[this.frameIndex];\n  }\n}\n\nmodule.exports = BaseClass;\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/tasks/build.js":"'use strict';\n\nconst Task    = require('./task');\nconst Clean   = require('./clean');\nconst Copy    = require('./copy');\nconst Compile = require('./compile');\n\nclass Build extends Task {\n  constructor(args) {\n    super(Object.assign({\n      env : 'dev',\n    }, args));\n  }\n\n  run(options) {\n    const _this = this;\n    _this.options = Object.assign({}, options);\n\n    return _this.clean().\n      then(() => _this.copy()).\n      then(() => _this.compile(_this.env));\n  }\n\n  clean() {\n    const _this = this;\n    const clean = Clean.new();\n\n    _this.ui.startProgress('Cleaning');\n    return clean.run().\n      finally(() => {\n        _this.ui.stopProgress();\n      }).\n      then(() => {\n        _this.ui.writeSuccess('Clean successful.');\n        return Promise.resolve();\n      }).\n      catch(() => {\n        _this.ui.writeError('Failed to clean directories: [ dist, tmp ]');\n        return Promise.reject();\n      });\n  }\n\n  copy() {\n    const _this = this;\n    const copy = Copy.new();\n\n    _this.ui.startProgress('Copying vendor and third party libraries');\n    return copy.run({}).\n      finally(() => {\n        _this.ui.stopProgress();\n      }).\n      then(() => {\n        _this.ui.writeSuccess('Copied vendor and third party libraries.');\n        return Promise.resolve();\n      }).\n      catch(() => {\n        _this.ui.writeError('Error copying vendor and/or third party libraries.');\n        return Promise.reject();\n      });\n  }\n\n  compile(env) {\n    const _this = this;\n    const compile = Compile.new();\n\n    _this.ui.startProgress('Building');\n\n    return compile.run(env).\n      finally(() => {\n        _this.ui.stopProgress();\n      }).\n      then(() => {\n        _this.ui.writeSuccess('Build successful.');\n        return Promise.resolve();\n      }).\n      catch((e) => {\n        _this.ui.writeError('Build failed.');\n        return Promise.reject(e);\n      });\n  }\n}\n\nmodule.exports = {\n  new : (args) => new Build(args),\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/tasks/task.js":"'use strict';\n\nclass Task {\n  constructor(args) {\n    Object.assign(this, args);\n  }\n\n  run() {\n    throw new Error('Task needs to have run() defined.');\n  }\n}\n\nmodule.exports = Task;\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/tasks/clean.js":"'use strict';\n\nconst fs      = require('fs-extra');\nconst path    = require('path');\nconst Promise = require('bluebird');\nconst globals = require('../cli/globals');\nconst Task    = require('./task');\n\nclass Clean extends Task {\n  constructor(args) {\n    super(Object.assign({\n      buildDir : globals.buildDir,\n      tempDir  : globals.tempDir,\n    }, args));\n  }\n\n  run() {\n    const remove = Promise.promisify(fs.remove);\n    const dir = path.resolve('./');\n\n    return Promise.all([\n      remove(`${dir}/${this.buildDir}`),\n      remove(`${dir}/${this.tempDir}`),\n    ]);\n  }\n}\n\nmodule.exports = {\n  new : (args) => new Clean(args),\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/cli/globals.js":"module.exports = {\n  sourceDir     : 'src',\n  buildDir      : 'dist',\n  tempDir       : 'tmp',\n  assetsDir     : 'assets',\n  thirdpartyDir : 'thirdparty',\n  vendorDir     : 'vendor',\n\n  libraries : {\n    angular : [\n      'angular2/platform/browser.js',\n      'angular2/bundles/angular2.dev.js',\n      'angular2/bundles/http.dev.js',\n      'angular2/bundles/router.dev.js',\n      'angular2/bundles/angular2-polyfills.js',\n      'angular2/es6/dev/src/testing/shims_for_IE.js',\n      'rxjs/bundles/Rx.js',\n      'es6-shim/es6-shim.min.js',\n      'systemjs/dist/system.src.js',\n      'systemjs/dist/system-polyfills.js',\n    ],\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/tasks/copy.js":"'use strict';\n\nconst path    = require('path');\nconst fs      = require('fs-extra');\nconst Promise = require('bluebird');\nconst ncpAsync = require('ncp').ncp;\nconst globals = require('../cli/globals');\nconst Task    = require('./task');\nconst fsUtil  = require('../util/fs-util');\nconst buildFiles   = require(path.resolve('./build-config'));\n\nclass Copy extends Task {\n  constructor(args) {\n    super(Object.assign({}, args));\n    this.copy = Promise.promisify(this.cp);\n    this.ncp = Promise.promisify(ncpAsync);\n  }\n\n  run() {\n    const _this = this;\n    return _this.copyAssets().\n      then(() => _this.copyAngular()).\n      then(() => _this.copyMisc());\n      // then(() => _this.copyThirdparty());\n  }\n\n  copyAngular() {\n    const targetDir = `./${globals.buildDir}/${globals.vendorDir}`;\n    const sources = buildFiles.vendorNpmFiles.map((l) => `node_modules/${l}`);\n    const dest = buildFiles.vendorNpmFiles.map((l) => `${targetDir}/${l}`);\n\n    // create vendir directory\n    fsUtil.dir.touch(targetDir);\n\n    return sources.reduce((promise, source, index) =>\n      promise.then(() =>\n        this.ncp(source, dest[index], {})\n      )\n    , Promise.resolve());\n  }\n\n  copyAssets() {\n    const file = [{\n      src  : `${globals.sourceDir}/${globals.assetsDir}`,\n      dest : `${globals.buildDir}/${globals.assetsDir}`,\n    }];\n\n    return this.copy(file);\n  }\n\n  copyMisc() {\n    const sources = buildFiles.otherFiles.map((f) => {\n      if (typeof f === 'object') {\n        return { src: f.src, dest: `${f.dest}/${path.basename(f.src)}` };\n      }\n      return { src: f, dest: `dist/${path.basename(f)}` };\n    });\n    return this.copy(sources);\n  }\n\n  copyThirdparty() {\n    const file = [];\n    return this.copy(file);\n  }\n\n  cp(files, callback) {\n    if (!Array.isArray(files)) {\n      callback('error');\n    }\n    for (const file of files) {\n      fs.copy(file.src, file.dest);\n    }\n    callback();\n  }\n}\n\nmodule.exports = {\n  new : (args) => new Copy(args),\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/util/fs-util.js":"'use strict';\n\nconst fs   = require('fs-extra');\nconst path = require('path');\nconst _    = require('lodash');\n\nfunction tryCreateDir(dirpath) {\n  if (fs.existsSync(dirpath)) {\n    return 0;\n  }\n\n  try {\n    fs.mkdirSync(dirpath);\n  } catch (e) {\n    return -1;\n  }\n\n  return 1;\n}\n\nfunction touchDir(dirpath) {\n  const parts = dirpath.split(path.sep);\n  for (let i = 1; i < parts.length; i++) {\n    const res = tryCreateDir(path.join.apply(null, parts.slice(0, i)));\n    if (res < -1) {\n      return false;\n    }\n  }\n\n  return tryCreateDir(path.join.apply(null, parts.slice(0, parts.length)));\n}\n\nfunction touchFile() {\n  // no implementation yet\n  return true;\n}\n\nfunction relativePath(p) {\n  const parts = p.split(path.sep);\n  const index = _.indexOf(parts, 'src');\n  return path.join.apply(null, parts.slice(index + 1));\n}\n\nmodule.exports = {\n  file : {\n    touch : touchFile,\n  },\n  dir : {\n    touch : touchDir,\n    relativePath,\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/blueprints/ng2/karma.conf.js":"module.exports = function(config) {\n  config.set({\n    basePath: '',\n    frameworks: ['jasmine'],\n    plugins: [\n      require('karma-jasmine'),\n      require('karma-chrome-launcher')\n    ],\n    customLaunchers: {\n      // chrome setup for travis CI using chromium\n      Chrome_travis_ci: {\n          base: 'Chrome',\n          flags: ['--no-sandbox']\n      },\n    },\n    files: [\n      {pattern: 'node_modules/systemjs/dist/system-polyfills.js', included: true, watched: true},\n      {pattern: 'node_modules/systemjs/dist/system.src.js', included: true, watched: true},\n      {pattern: 'node_modules/es6-shim/es6-shim.js', included: true, watched: true},\n      {pattern: 'node_modules/angular2/bundles/angular2-polyfills.js', included: true, watched: true},\n      {pattern: 'node_modules/rxjs/bundles/Rx.js', included: true, watched: true},\n      {pattern: 'node_modules/angular2/bundles/angular2.js', included: true, watched: true},\n      {pattern: 'node_modules/angular2/bundles/http.dev.js', included: true, watched: true},\n      {pattern: 'node_modules/angular2/bundles/router.dev.js', included: true, watched: true},\n      {pattern: 'node_modules/angular2/bundles/testing.dev.js', included: true, watched: true},\n\n\n      {pattern: 'karma-test-shim.js', included: true, watched: true},\n\n      // paths loaded via module imports\n      {pattern: 'dist/**/*.js', included: false, watched: true},\n\n      // paths loaded via Angular's component compiler\n      // (these paths need to be rewritten, see proxies section)\n      {pattern: 'dist/**/*.html', included: false, watched: true},\n      {pattern: 'dist/**/*.css', included: false, watched: true},\n\n      // paths to support debugging with source maps in dev tools\n      {pattern: 'dist/**/*.ts', included: false, watched: false},\n      {pattern: 'dist/**/*.js.map', included: false, watched: false}\n    ],\n    proxies: {\n      // required for component assets fetched by Angular's compiler\n      \"/app/\": \"/base/dist/app/\"\n    },\n    exclude: [],\n    preprocessors: {},\n    reporters: ['progress'],\n    port: 9876,\n    colors: true,\n    logLevel: config.LOG_INFO,\n    autoWatch: true,\n    browsers: ['Chrome'],\n    singleRun: false\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/compile/less.js":"'use strict';\n\nconst gulp    = require('gulp');\nconst less    = require('gulp-less');\nconst cssmin  = require('gulp-cssmin');\nconst logger  = require('../ui/logger');\n\nclass LessCompile {\n  constructor(options) {\n    this.options = Object.assign({}, options);\n  }\n\n  compile(src, dest, env) {\n    const l = less(this.options);\n\n    return new Promise((resolve, reject) => {\n      l.on('error', (err) => {\n        logger.writeError(err.message);\n        reject('error');\n      }).\n      on('end', () => {\n        resolve('success');\n      });\n\n      if (env === 'prod') {\n        gulp.src(`${src}/**/*.less`)\n        .pipe(l)\n        .pipe(cssmin())\n        .pipe(gulp.dest(dest));\n      } else {\n        gulp.src(`${src}/**/*.less`)\n        .pipe(l)\n        .pipe(gulp.dest(dest));\n      }\n    });\n  }\n}\n\nmodule.exports = LessCompile;\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/ui/logger.js":"'use strict';\n\nconst _  = require('lodash');\nconst Ui = require('./base-ui');\n\nclass Logger extends Ui {\n  logErrors(msg) {\n    const result = this._filter(msg).join('\\n');\n    if (result) {\n      this.ui.writeError(result);\n    }\n    return result;\n  }\n\n  logWarnings(msg) {\n    const result = this._filter(msg, true).join('\\n');\n    if (result) {\n      this.ui.writeWarning(result);\n    }\n    return result;\n  }\n\n  logCreate(path) {\n    this.writeInfo(this.colors.green('  Create  ') + path);\n  }\n\n  _filter(str, warnings) {\n    const errLines = str.split('\\n');\n    const errorLabels = ['ERR ', 'ERR!', 'ERROR'];\n    if (warnings) {\n      errorLabels.push('WARN');\n      errorLabels.push('WARNING');\n    }\n\n    return _.filter(errLines, (line) =>\n      _.some(errorLabels, (err) =>\n        ~line.toUpperCase().indexOf(err)));\n  }\n}\n\nmodule.exports = new Logger();\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/compile/pug.js":"'use strict';\n\nconst gulp    = require('gulp');\nconst pug     = require('gulp-pug');\nconst logger  = require('../ui/logger');\n\nclass PugCompile {\n  constructor(options) {\n    this.options = Object.assign({}, options);\n  }\n\n  compile(src, dest, env) {\n    const _this = this;\n    return new Promise((resolve, reject) => {\n      _this.options.pretty = env !== 'prod';\n\n      const p = pug(_this.options);\n      p.on('error', (err) => {\n        logger.writeError(err.message);\n        reject('error');\n      })\n      .on('end', () => {\n        resolve('success');\n      });\n\n      gulp.src(`${src}/**/*.pug`)\n      .pipe(p)\n      .pipe(gulp.dest(dest));\n    });\n  }\n}\n\nmodule.exports = PugCompile;\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/compile/sass.js":"'use strict';\n\nconst gulp    = require('gulp');\nconst sass    = require('gulp-sass');\nconst cssmin  = require('gulp-cssmin');\nconst logger  = require('../ui/logger');\n\nclass SassCompile {\n  constructor(options) {\n    this.options = Object.assign({}, options);\n  }\n\n  compile(src, dest, env) {\n    const s = sass(this.options);\n\n    return new Promise((resolve, reject) => {\n      s.on('error', (err) => {\n        logger.writeError(err.message);\n        reject('error');\n      }).\n      on('end', () => {\n        resolve('success');\n      });\n\n      if (env === 'prod') {\n        gulp.src(`${src}/**/*.scss`)\n        .pipe(s)\n        .pipe(cssmin())\n        .pipe(gulp.dest(dest));\n      } else {\n        gulp.src(`${src}/**/*.scss`)\n        .pipe(s)\n        .pipe(gulp.dest(dest));\n      }\n    });\n  }\n}\n\nmodule.exports = SassCompile;\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/make/component.js":"'use strict';\n\nconst fs      = require('fs-extra');\nconst Promise = require('bluebird');\nconst path    = require('path');\nconst Make    = require('./make');\nconst fsUtil  = require('../util/fs-util');\nconst logger  = require('../ui/logger');\n\nclass MakeComponent extends Make {\n\n  validate() {\n    if (!this.options.name) {\n      logger.writeError('Give a name to the component.');\n      return false;\n    }\n    return true;\n  }\n\n  create() {\n    const dirName = this.dashedString(this.options.name);\n    const dir = `${this.options.path}/${dirName}.component`;\n\n    if (!fsUtil.dir.touch(dir)) {\n      logger.writeError(`Component with same name already exists. [${dir}]`);\n      return null;\n    }\n    this.dir = dir;\n    return dir;\n  }\n\n  copy() {\n    const cp = Promise.promisify(fs.copy);\n    const source = path.join(__dirname, '..', '..', 'blueprints', 'scaffolds', 'component');\n\n    return cp(source, this.dir).\n      catch(() => {\n        logger.writeError('Component generation failed.');\n      });\n  }\n\n  postInstall() {\n    this.addBarrel(this.dir, 'component');\n  }\n\n  placeholders() {\n    return {\n      selector         : this.dashedString(this.options.name),\n      moduleName       : this.titleCaseString(this.options.name),\n      dashedModuleName : this.dashedString(this.options.name),\n      className        : this.dashedString(this.options.name),\n    };\n  }\n\n\n}\n\nmodule.exports = {\n  create : () => new MakeComponent(),\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/make/make.js":"'use strict';\n\nconst path   = require('path');\nconst fs     = require('fs-extra');\nconst _      = require('lodash');\nconst EOL    = require('os').EOL;\nconst fsUtil = require('../util/fs-util');\nconst logger = require('../ui/logger');\n\nclass Make {\n  constructor(args) {\n    Object.assign(this, {\n      options : {\n        path : 'src/app',\n      },\n      fileName : '__name__',\n      styleExt : '__style__',\n    }, args);\n  }\n\n  init() {\n    this.fileName = this.options.name;\n    this.styleExt = 'scss';\n  }\n\n  make(options) {\n    const _this = this;\n    Object.assign(this.options, options);\n\n    const pathAndName = this.getPathAndName(this.options.pathAndName);\n    this.options.name = pathAndName.name;\n    this.options.path = pathAndName.path || this.options.path;\n\n    if (this.validate() && this.create()) {\n      this.init();\n      this.copy().\n        then(() => {\n          const files = this._getFiles();\n          _this._processTemplates(files);\n          _this.postInstall();\n        });\n    }\n  }\n\n  validate() {\n    throw new Error('Make needs to have validate() defined.');\n  }\n\n  create() {\n    throw new Error('Make needs to have create() defined.');\n  }\n\n  copy() {\n    throw new Error('Make needs to have copy() defined.');\n  }\n\n  postInstall() {\n    // override if required\n  }\n\n  placeholders() {\n    return {};\n  }\n\n  _getFiles() {\n    return fs.readdirSync(this.dir);\n  }\n\n  _processTemplates(files) {\n    for (const f of files) {\n      const name = f.replace(/__name__/, this.dashedString(this.options.name))\n                    .replace(/__style__/, this.styleExt);\n      const fullPath = `${this.dir}/${name}`;\n      fs.renameSync(`${this.dir}/${f}`, fullPath);\n\n      fs.readFile(fullPath, (err, data) => {\n        const tpl = _.template(data);\n        fs.writeFile(fullPath, tpl(this.placeholders()));\n      });\n      logger.logCreate(fsUtil.dir.relativePath(fullPath));\n    }\n  }\n\n  camelCaseString(str) {\n    return str.replace(/-(.)/g, (s) => s[1].toUpperCase());\n  }\n\n  titleCaseString(str) {\n    const camelStr = this.camelCaseString(str);\n    return camelStr[0].toUpperCase() + camelStr.slice(1);\n  }\n\n  getPathAndName(name) {\n    let dirname = path.dirname(name)\n                      .replace(/^\\.\\//, '')\n                      .replace(/^\\./, '')\n                      .replace(/^app/, '')\n                      .replace(/^src\\/app/, '')\n                      .replace(/^\\//, '');\n    dirname = dirname ? `src/app/${dirname}` : 'src/app';\n\n    return {\n      name : path.basename(name),\n      path : dirname,\n    };\n  }\n\n  dashedString(str) {\n    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n  }\n\n  addBarrel(barrelPath, barrelKind) {\n    const barrel = fsUtil.dir.relativePath(barrelPath);\n    const file = 'src/system-config.ts';\n    const kind = barrelKind || 'other';\n\n    fs.readFile(file, (err, data) => {\n      const tpl = _.replace(data,\n                            `/** @${kind}-barrel */`,\n                            `'${barrel}',${EOL}  /** @${kind}-barrel */`\n                    );\n      fs.writeFile(file, tpl);\n    });\n  }\n}\n\nmodule.exports = Make;\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/make/directive.js":"'use strict';\n\nconst fs      = require('fs-extra');\nconst Promise = require('bluebird');\nconst path    = require('path');\nconst Make    = require('./make');\nconst fsUtil  = require('../util/fs-util');\nconst logger  = require('../ui/logger');\n\nclass MakeDirective extends Make {\n\n  validate() {\n    if (!this.options.name) {\n      logger.writeError('Give a name to the Directive.');\n      return false;\n    }\n    return true;\n  }\n\n  create() {\n    const dirName = this.dashedString(this.options.name);\n    const dir = path.resolve(`${this.options.path}/${dirName}.directive`);\n\n    if (!fsUtil.dir.touch(dir)) {\n      logger.writeError(`Directive with same name already exists. [${dir}]`);\n      return null;\n    }\n    this.dir = dir;\n    return dir;\n  }\n\n  copy() {\n    const cp = Promise.promisify(fs.copy);\n    const source = path.join(__dirname, '..', '..', 'blueprints', 'scaffolds', 'directive');\n\n    return cp(source, this.dir).\n      catch(() => {\n        logger.writeError('Directive generation failed.');\n      });\n  }\n\n  postInstall() {\n    this.addBarrel(this.dir, 'directive');\n  }\n\n  placeholders() {\n    return {\n      selector         : this.dashedString(this.options.name),\n      moduleName       : this.titleCaseString(this.options.name),\n      dashedModuleName : this.dashedString(this.options.name),\n    };\n  }\n}\n\nmodule.exports = {\n  create : () => new MakeDirective(),\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/make/pipe.js":"'use strict';\n\nconst fs      = require('fs-extra');\nconst Promise = require('bluebird');\nconst path    = require('path');\nconst Make    = require('./make');\nconst fsUtil  = require('../util/fs-util');\nconst logger  = require('../ui/logger');\n\nclass MakePipe extends Make {\n\n  validate() {\n    if (!this.options.name) {\n      logger.writeError('Give a name to the Pipe.');\n      return false;\n    }\n    return true;\n  }\n\n  create() {\n    const dirName = this.dashedString(this.options.name);\n    const dir = path.resolve(`${this.options.path}/${dirName}.pipe`);\n\n    if (!fsUtil.dir.touch(dir)) {\n      logger.writeError(`Pipe with same name already exists. [${dir}]`);\n      return null;\n    }\n    this.dir = dir;\n    return dir;\n  }\n\n  copy() {\n    const cp = Promise.promisify(fs.copy);\n    const source = path.join(__dirname, '..', '..', 'blueprints', 'scaffolds', 'pipe');\n\n    return cp(source, this.dir).\n      catch(() => {\n        logger.writeError('Pipe generation failed.');\n      });\n  }\n\n  postInstall() {\n    this.addBarrel(this.dir, 'pipe');\n  }\n\n  placeholders() {\n    return {\n      moduleName       : this.titleCaseString(this.options.name),\n      dashedModuleName : this.dashedString(this.options.name),\n    };\n  }\n}\n\nmodule.exports = {\n  create : () => new MakePipe(),\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/make/route.js":"'use strict';\n\nconst fs      = require('fs-extra');\nconst Promise = require('bluebird');\nconst path    = require('path');\nconst Make    = require('./make');\nconst fsUtil  = require('../util/fs-util');\nconst logger  = require('../ui/logger');\n\nclass MakeRoute extends Make {\n  validate() {\n    if (!this.options.name) {\n      logger.writeError('Give a name to the route.');\n      return false;\n    }\n    return true;\n  }\n\n  create() {\n    const dirName = this.dashedString(this.options.name);\n    const dir = path.resolve(`${this.options.path}/+${dirName}`);\n    const component = `${dir}/${dirName}.component`;\n\n    if (!fsUtil.dir.touch(dir)) {\n      logger.writeError(`Route with same name already exists. [${dir}]`);\n      return null;\n    }\n    if (!fsUtil.dir.touch(component)) {\n      logger.writeError('Unable to create component for the route.');\n      return null;\n    }\n    this.dir = component;\n    return component;\n  }\n\n  copy() {\n    const cp = Promise.promisify(fs.copy);\n    const source = path.join(__dirname, '..', '..', 'blueprints', 'scaffolds', 'component');\n\n    return cp(source, this.dir).\n      catch(() => {\n        logger.writeError('Component generation failed.');\n      });\n  }\n\n  postInstall() {\n    this.addBarrel(this.dir, 'route');\n  }\n\n  placeholders() {\n    return {\n      selector         : this.dashedString(this.options.name),\n      moduleName       : this.titleCaseString(this.options.name),\n      dashedModuleName : this.dashedString(this.options.name),\n      className        : this.dashedString(this.options.name),\n    };\n  }\n}\n\nmodule.exports = {\n  create : () => new MakeRoute(),\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/make/scaffold.js":"'use strict';\n\nconst component   = require('./component');\nconst directive   = require('./directive');\nconst pipe        = require('./pipe');\nconst service     = require('./service');\nconst route       = require('./route');\n\nmodule.exports = {\n  create : (scaffold) => {\n    switch (scaffold) {\n      case 'component':\n        return component.create();\n      case 'directive':\n        return directive.create();\n      case 'pipe':\n        return pipe.create();\n      case 'service':\n        return service.create();\n      case 'route':\n        return route.create();\n      default:\n        return null;\n    }\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/make/service.js":"'use strict';\n\nconst fs      = require('fs-extra');\nconst Promise = require('bluebird');\nconst path    = require('path');\nconst Make    = require('./make');\nconst fsUtil  = require('../util/fs-util');\nconst logger  = require('../ui/logger');\n\nclass MakeService extends Make {\n  validate() {\n    if (!this.options.name) {\n      logger.writeError('Give a name to the Service.');\n      return false;\n    }\n    return true;\n  }\n\n  create() {\n    const dirName = this.dashedString(this.options.name);\n    const dir = path.resolve(`${this.options.path}/${dirName}.service`);\n\n    if (!fsUtil.dir.touch(dir)) {\n      logger.writeError(`Service with same name already exists. [${dir}]`);\n      return null;\n    }\n    this.dir = dir;\n    return dir;\n  }\n\n  copy() {\n    const cp = Promise.promisify(fs.copy);\n    const source = path.join(__dirname, '..', '..', 'blueprints', 'scaffolds', 'service');\n\n    return cp(source, this.dir).\n      catch(() => {\n        logger.writeError('Service generation failed.');\n      });\n  }\n\n  postInstall() {\n    this.addBarrel(this.dir, 'service');\n  }\n\n  placeholders() {\n    return {\n      moduleName       : this.titleCaseString(this.options.name),\n      dashedModuleName : this.dashedString(this.options.name),\n    };\n  }\n}\n\nmodule.exports = {\n  create : () => new MakeService(),\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/tasks/compile.js":"'use strict';\n\nconst Promise     = require('bluebird');\nconst globals     = require('../cli/globals');\nconst Task        = require('./task');\nconst PugCompile  = require('../compile/pug');\nconst SassCompile = require('../compile/sass');\nconst LessCompile = require('../compile/less');\n\nconst webpack     = require('webpack');\nconst config      = require('../webpack/webpack.config');\n\nclass Compile extends Task {\n  constructor(args) {\n    super(Object.assign({\n      src  : globals.sourceDir,\n      dest : globals.buildDir,\n      p    : new PugCompile(),\n      s    : new SassCompile(),\n      l    : new LessCompile(),\n    }, args));\n  }\n\n  run(env) {\n    const _this = this;\n\n    return Promise.resolve().\n      then(() => _this.ts(env)).\n      then(() => _this.pug(env)).\n      then(() => _this.sass(env)).\n      then(() => _this.less(env));\n  }\n\n  pug(env) {\n    return this.p.compile(this.src, this.dest, env);\n  }\n\n  ts(env) {\n    this.compiler = this.compiler || webpack(config(env || 'dev'));\n    return new Promise((resolve, reject) => {\n      this.compiler.run((err) => {\n        if (err) {\n          reject(err.message);\n        }\n        resolve();\n      });\n    });\n  }\n\n  sass(env) {\n    return this.s.compile(this.src, this.dest, env);\n  }\n\n  less(env) {\n    return this.l.compile(this.src, this.dest, env);\n  }\n}\n\nmodule.exports = {\n  new : (args) => new Compile(args),\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/webpack/webpack.config.js":"const path      = require('path');\nconst webpack   = require('webpack');\nconst ForkCheckerPlugin = require('awesome-typescript-loader').ForkCheckerPlugin;\n\nconst devConfig = require('./webpack.dev.config.js');\nconst prodConfig = require('./webpack.prod.config.js');\n\nconst appRoot   = path.resolve('./');\nconst appConfig = require(`${appRoot}/src/app-config`);\n\nfunction getConfig(env) {\n  const envPath   = 'src/environments';\n\n  return {\n    // context: __dirname,\n    bail  : true,\n    entry : {\n      vendor : `${appRoot}/src/${appConfig.app.vendor}`,\n      main   : `${appRoot}/src/${appConfig.app.main}`,\n    },\n    output : {\n      path     : `${appRoot}/${appConfig.app.outDir}`,\n      filename : '[name].bundle.js',\n    },\n    module : {\n      loaders : [\n        // typescript\n        {\n          test    : /\\.ts$/,\n          loaders : [\n            {\n              loader : 'awesome-typescript-loader',\n              query  : {\n                tsconfig : `${appRoot}/src/tsconfig.json`,\n              },\n            },\n            {\n              loader : 'template-loader',\n              query  : {\n                rootPath : appRoot,\n              },\n            },\n          ],\n          exclude : [/\\.(spec|e2e)\\.ts$/],\n        },\n        // pug\n        // {\n        //   test   : /\\.css$/,\n        //   loader : 'style!css',\n        // },\n        // {\n        //   test   : /\\.(html|css)$/,\n        //   loader : 'raw-loader',\n        // },\n      ],\n    },\n    resolveLoader : {\n      alias : {\n        // 'awesome-typescript-loader' : require.resolve('awesome-typescript-loader'),\n        'template-loader' : require.resolve('./template-loader'),\n      },\n    },\n    resolve : {\n      extensions : ['', '.ts', '.tsx', '.js'],\n    },\n    plugins : [\n      new webpack.NormalModuleReplacementPlugin(\n          // swapp the environment files.\n          // See https://webpack.github.io/docs/list-of-plugins.html#normalmodulereplacementplugin\n          new RegExp(path.resolve(appRoot, envPath, appConfig.app.environments.source)\n                      .replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&')\n                    ),\n          path.resolve(appRoot, envPath, appConfig.app.environments[env])\n        ),\n      new ForkCheckerPlugin(),\n    ],\n  };\n}\n\nmodule.exports = (env) => {\n  const envConfig = env === 'dev' ? devConfig(env, appConfig) : prodConfig(env, appConfig);\n  return Object.assign(getConfig(env), envConfig);\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/webpack/webpack.dev.config.js":"module.exports = () => { // env, appConfig\n  const devConfig = {\n    devtool : 'source-map',\n    // devServer: {\n    //   contentBase: appConfig.app.outDir,\n    //   hot: true,\n    //   historyApiFallback: true,\n    //   // quiet: true,\n    // },\n  };\n\n  return devConfig;\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/webpack/webpack.prod.config.js":"module.exports = () => { // env, appConfig\n  const prodConfig = {\n    // define config\n  };\n\n  return prodConfig;\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/tasks/create.js":"'use strict';\n\nconst Promise = require('bluebird');\nconst path    = require('path');\nconst fs      = require('fs-extra');\nconst Task    = require('./task');\nconst _       = require('lodash');\n\nclass Create extends Task {\n  constructor(args) {\n    super(Object.assign({\n      startProgressMessage : 'Creating app',\n      completionMessage    : 'App created.',\n      failureMessage       : 'App creation failed.',\n    }, args));\n    this.copy = Promise.promisify(fs.copy);\n  }\n\n  run(options) {\n    const source = path.join(__dirname, '..', '..', 'blueprints', 'ng2');\n    this.dir = options.dir;\n\n    return this.copy(source, this.dir).\n      then(this.copyTemplates.bind(this)).\n      then(this.postCopy.bind(this)).\n      then(this.announceCompletion.bind(this)).\n      catch(this.annouceFailure.bind(this));\n  }\n\n  copyTemplates() {\n    if (this.options.surge) {\n      const source = path.join(__dirname, '..', '..', 'blueprints', 'surge.sh');\n      return this.copy(source, this.dir);\n    }\n\n    return Promise.resolve();\n  }\n\n  postCopy() {\n    return Promise.all([\n      this._processFile('package.json', { appName: path.normalize(this.dir) }),\n      this._processFile('README.md', { appName: path.normalize(this.dir) }),\n    ]);\n  }\n\n  _processFile(file, placeholders) {\n    const fullPath = `${this.dir}/${file}`;\n    fs.readFile(fullPath, (err, data) => {\n      const tpl = _.template(data);\n      fs.writeFile(fullPath, tpl(placeholders));\n    });\n  }\n\n  announceCompletion() {\n    this.ui.writeSuccess(this.completionMessage);\n  }\n\n  annouceFailure() {\n    this.ui.writeError(this.failureMessage);\n  }\n}\n\nmodule.exports = {\n  new : (args) => new Create(args),\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/tasks/npm-install.js":"/* eslint-disable no-param-reassign */\n\n'use strict';\n\nconst Promise = require('bluebird');\nconst Task    = require('./task');\nconst npm     = require('../util/npm');\nconst logger  = require('../ui/logger');\nconst pkg     = require('../util/pkg');\n\nclass NpmInstall extends Task {\n  constructor(args) {\n    super(Object.assign({\n      errors               : '',\n      command              : 'install',\n      startProgressMessage : 'Installing npm packages',\n      completionMessage    : 'Installed npm packages.',\n      failureMessage       : 'Failed to install few npm packages.',\n    }, args));\n  }\n\n  run() {\n    this.options = {\n      dir : this.dir,\n    };\n\n    this.startTime = new Date();\n    this.ui.startProgress(this.startProgressMessage);\n\n    if (this.new) {\n      return this.npmNewInstall();\n    }\n    return this.npmInstall();\n  }\n\n  npmInstall() {\n    return Promise.resolve(\n      npm(this.command, [], {}, this.options).\n      then(this.errorLog.bind(this))\n    ).\n    finally(this.finally.bind(this)).\n    then(this.announceCompletion.bind(this)).\n    catch(this.announceFailure.bind(this));\n  }\n\n  npmNewInstall() {\n    this.command = 'update';\n\n    return Promise.all([\n      this.npmDevelopment().then(this.errorLog.bind(this)),\n      this.npmProduction().then(this.errorLog.bind(this)),\n    ]).\n    finally(this.finally.bind(this)).\n    then(this.announceCompletion.bind(this)).\n    catch(this.announceFailure.bind(this));\n  }\n\n  npmProduction() {\n    const npmOptions = Object.assign({}, {\n      save : true,\n    });\n\n    return npm(this.command, [], npmOptions, this.options);\n  }\n\n  npmDevelopment() {\n    const npmOptions = Object.assign({}, {\n      'save-dev'    : true,\n      'no-optional' : true,\n    });\n\n    return npm(this.command, [], npmOptions, this.options);\n  }\n\n  announceCompletion() {\n    const err = logger._filter(this.errors).join('\\n');\n    if (err) {\n      this.ui.writeError(this.failureMessage);\n      this.ui.writeInfo(err);\n    } else {\n      const timeDiff = (new Date() - this.startTime) / 1000;\n      this.ui.writeSuccess(`${this.completionMessage} (${Math.round(timeDiff)} sec)`);\n    }\n\n    const _this = this;\n    return pkg.read(_this.dir, 'utf8').\n    then((data) => {\n      // angular2(beta) works with specific versions of peer dependencies\n      if (data.dependencies['reflect-metadata']) {\n        data.dependencies['reflect-metadata'] = data.dependencies['reflect-metadata']\n                                                  .replace('^', '');\n      }\n      if (data.dependencies.rxjs) {\n        data.dependencies.rxjs = data.dependencies.rxjs.replace('^', '');\n      }\n\n      return pkg.write(_this.dir, data);\n    }).\n    catch((e) => {\n      _this.ui.writeError(e);\n    });\n  }\n\n  announceFailure(result) {\n    this.ui.writeError(this.failureMessage);\n    logger.logErrors(result.stderr);\n  }\n\n  finally() {\n    this.ui.stopProgress();\n  }\n\n  errorLog(result) {\n    this.errors += result.stderr;\n  }\n}\n\nmodule.exports = {\n  new : (args) => new NpmInstall(args),\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/util/npm.js":"'use strict';\n\nconst _    = require('lodash');\nconst exec = require('child-process-promise').exec;\n\nmodule.exports = function npm(command, args, options, runOptions) {\n  function constructCommand(_command, _args, _options) {\n    let cmd = 'npm ';\n    const arg = _args.join(' ');\n    const cmdOptions = Object.assign({}, _options, {\n      // loglevel: 'error',\n    });\n\n    cmd += `${_command} ${arg}`;\n\n    _.forEach(cmdOptions, (value, key) => {\n      if (!value) {\n        cmd += ` --${key} ${value}`;\n      } else {\n        cmd += ` --${key}`;\n      }\n    });\n    return cmd;\n  }\n\n  const cmd = constructCommand(command, args, options);\n  const cmdRunOptions = {};\n\n  if (runOptions && runOptions.dir) {\n    cmdRunOptions.cwd = runOptions.dir;\n  }\n\n  return exec(cmd, cmdRunOptions);\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/tasks/serve.js":"'use strict';\n\nconst browserSync        = require('browser-sync').create();\nconst historyApiFallback = require('connect-history-api-fallback');\nconst Task               = require('./task');\nconst logger             = require('../ui/logger');\nconst globals            = require('../cli/globals');\nconst Watch              = require('../tasks/watch');\n\nclass Serve extends Task {\n  constructor(args) {\n    super(Object.assign({\n      errorMessage : 'Error launching App.',\n      showWarnings : false,\n      showFullLog  : false,\n    }, args));\n  }\n\n  run(options) {\n    this.npmOptions = Object.assign({}, options);\n    // this.ui.writeInfo(this.startMessage);\n\n    this.startServer();\n    const watch = Watch.new({ dir: globals.sourceDir });\n    watch.run(this.reloadServer.bind(this));\n\n    return Promise.resolve();\n  }\n\n  startServer() {\n    browserSync.init({\n      server     : `./${globals.buildDir}`,\n      notify     : false,\n      middleware : [historyApiFallback()],\n      // ghostMode: {\n      //   clicks: true,\n      //   location: true,\n      //   forms: true,\n      //   scroll: false\n      // }\n    });\n  }\n\n  reloadServer() {\n    browserSync.reload();\n  }\n\n  announceCompletion(result) {\n    this.ui.writeSuccess(this.completionMessage);\n    logger.logWarnings(result.stderr);\n  }\n\n  annouceFailure(result) {\n    this.ui.writeError(this.errorMessage);\n    logger.logWarnings(result.stderr);\n    return Promise.reject();\n  }\n\n  writeProgress(result) {\n    const _this = this;\n    result.stdout.on('data', (data) => {\n      if (_this.showFullLog) {\n        _this.ui.writeInfo(data);\n      } else {\n        logger.logErrors(data);\n      }\n    });\n\n    result.stderr.on('data', (data) => {\n      logger.logErrors(data);\n    });\n  }\n}\n\nmodule.exports = {\n  new : (args) => new Serve(args),\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/tasks/watch.js":"'use strict';\n\nconst watch   = require('chokidar');\nconst Task    = require('./task');\nconst logger  = require('../ui/logger');\nconst Compile = require('./compile');\n\nclass Watch extends Task {\n  constructor(args) {\n    super(Object.assign({}, { config: args }));\n    this.compile = Compile.new();\n  }\n\n  run(callback) {\n    const watcher = this._watcher();\n    this.callback = callback;\n\n    watcher.on('add', this._onAdd.bind(this));\n    watcher.on('change', this._onChange.bind(this));\n    watcher.on('unlink', this._onDelete.bind(this));\n    watcher.on('ready', this._onReady.bind(this));\n    watcher.on('error', this._onError.bind(this));\n  }\n\n  _watcher() {\n    const watchConfig = Object.assign({}, {\n      ignored        : this._ignore,\n      ignoreInitial  : true,\n      persistent     : true,\n      interval       : 100,\n      binaryInterval : 300,\n      usePolling     : true,\n    });\n    return watch.watch(this.config.dir, watchConfig);\n  }\n\n  _ignore() { // name\n    return false;\n  }\n\n  _onReady() {\n    // logger.writeInfo('watching...');\n  }\n\n  _onAdd(file) {\n    logger.writeInfo(`added : ${file}`);\n    this._compile(file);\n  }\n\n  _onChange(file) { // stats\n    logger.writeInfo(`changed : ${file}`);\n    this._compile(file).\n      then(() => {\n        this.callback();\n      });\n  }\n\n  _onDelete(file) {\n    logger.writeInfo(`deleted : ${file}`);\n  }\n\n  _onError(error) {\n    logger.writeWarning(`File watching error: ${error}`);\n  }\n\n  _getFileType(file) {\n    return file.replace(/.*[\\.\\/\\\\]/, '').toLowerCase();\n  }\n\n  _compile(file) {\n    switch (this._getFileType(file)) {\n      case 'pug':\n        return this.compile.pug();\n      case 'ts':\n        return this.compile.ts();\n      case 'scss':\n        return this.compile.sass();\n      case 'less':\n        return this.compile.less();\n      default:\n        // nothing to compile\n    }\n    return Promise.resolve();\n  }\n}\n\nmodule.exports = {\n  new : (args) => new Watch(args),\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-cli/node_modules/angular2-cli/lib/webpack/template-loader.js":"const loaderUtils = require('loader-utils');\nconst path = require('path');\n\nconst templateUrlRegex = /templateUrl *:(.*)$/gm;\nconst stylesRegex = /styleUrls *:(\\s*\\[[^\\]]*?\\])/g;\nconst stringRegex = /(['\"])((?:[^\\\\]\\\\\\1|.)*?)\\1/g;\n\nfunction absolutePath(urls, basePath) {\n  // const fullUrl = url.charAt(0) !== '.' ? `${url}` : url;\n  // return `require('${fullUrl}')`;\n  return urls.replace(stringRegex, (match, quote, url) => `'${path.join(basePath, url)}'`);\n}\n\nfunction loader(content) {\n  const query = loaderUtils.parseQuery(this.query);\n  const relativePath = path.relative(query.rootPath, path.dirname(this.resourcePath))\n                       .replace(/^src/g, '.');\n\n  // Not cacheable during unit tests;\n  if (this.cacheable) {\n    this.cacheable();\n  }\n\n  const newSource = content.replace(\n                      templateUrlRegex,\n                      (match, url) => `templateUrl: ${absolutePath(url, relativePath)}`\n                    ).replace(\n                      stylesRegex,\n                      (match, urls) => `styleUrls: ${absolutePath(urls, relativePath)}`\n                    );\n\n  // Support for tests\n  // if (this.callback) {\n  //   this.callback(null, newSource, sourcemap);\n  // }\n  // else {\n  return newSource;\n  // }\n}\n\nmodule.exports = loader;\n"}